{"version":3,"sources":["webpack:///webpack/bootstrap 0cec465865bdffaa2a69","webpack:///./lib/rough_life.js","webpack:///./lib/game.js","webpack:///./lib/square.js","webpack:///./lib/util.js","webpack:///./lib/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACZD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,0CAAyC,iBAAiB;AAC1D;AACA;;AAEA,oBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA2B,eAAe;AAC1C,8BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,WAAW;AACpD;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAmB,iBAAiB;AACpC,sBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAAyC,WAAW;AACpD;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,iBAAiB;AACpC,sBAAqB,iBAAiB;AACtC;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,0BAA0B;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,0BAA0B;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA,WAAU,wDAAwD;AAClE,aAAY,wEAAwE;AACpF,UAAS,gFAAgF;AACzF,UAAS,gEAAgE;AACzE,SAAQ,wDAAwD;AAChE,aAAY,gDAAgD;AAC5D,UAAS,wEAAwE;AACjF,YAAW,wFAAwF;AACnG,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD,oBAAmB;AACnB,mDAAkD;AAClD,YAAW,gEAAgE;AAC3E,0BAAyB,gGAAgG;AACzH,WAAU,wEAAwE;AAClF,eAAc;AACd;AACA;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;;;;;;ACjpBA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;;;;ACxGA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,oBAAmB,sBAAsB;AACzC,sBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC9CA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0cec465865bdffaa2a69","const Game = require('./game');\nconst GameView = require('./game_view');\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const context = canvasEl.getContext(\"2d\");\n  const game = new Game(context, canvasEl);\n  new GameView(game, context).start();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/rough_life.js\n// module id = 0\n// module chunks = 0","const Square = require(\"./square\");\nconst Util = require(\"./util\");\n\nclass Game {\n  constructor(context, canvas) {\n    this.context = context;\n    this.canvas = canvas;\n    this.color = \"red\";\n    this.percentLiving = 10;\n    this.fill = false;\n    this.onlySquares = true;\n    this.followPath = false;\n    this.randomColors = false;\n    this.rainbowStep = false;\n    this.bindButtons();\n    this.random = false;\n\n    // only squares has precedent\n    this.step = false;\n    this.squares = {};\n    this.addSquares();\n    this.addLiveCount();\n  }\n\n\n\n  addSquares() {\n    Game.ALLPOSITIONS.forEach((position) => {\n      const options = {\n        pos: position,\n        canvasPosition: Util.canvasPosition(position),\n        width: Util.RECTWIDTH,\n        height: Util.RECTHEIGHT,\n        game: this\n      };\n      this.squares[position] = new Square(options);\n\n    });\n  }\n\n  setUpBoard() {\n    if (Game.OBJECTATTACK) {\n      this.objectAttack(\"glider\");\n    }\n\n    if (Game.PLACEOBJECTS) {\n      this.placeObjects(\"gosperGliderGun\", 8);\n    }\n\n    if (Game.RANDOMOBJECTS) {\n      this.placeRandomObjectsRandomly(Game.RANDOMOBJECTSCOUNT);\n    }\n  }\n\n  placeRandomObjectsRandomly(number) {\n    for (let i = 0; i < number; i++) {\n      this.placerandomObjectRandomly();\n    }\n  }\n\n  constantize(string) {\n    let constant;\n    return eval(\"this.\" + string);\n  }\n\n  placerandomObjectRandomly() {\n    const randomObjectName = Game.OBJECTNAMES[Math.floor(Math.random() * Game.OBJECTNAMES.length)];\n\n    const findDist = this.constantize(`${randomObjectName}Dist`);\n    const dist = findDist();\n    const randTries = 50;\n\n    for (let i = 0; i < randTries; i++) {\n      const randX = Math.floor(Math.random() * (Util.NUMSQUARESX));\n      const randY = Math.floor(Math.random() * (Util.NUMSQUARESY));\n      if (this.placeObject([randX, randY], randomObjectName)) {\n        return null;\n      }\n    }\n  }\n\n  isAllDead(pos, objectDist) {\n    const startingX = pos[0];\n    let startingY = pos[1] - objectDist;\n    const furthestX = pos[0] + objectDist;\n    let furthestY = startingY + objectDist;\n\n    if (objectDist === this.gosperGliderGunDist()) {\n      startingY = pos[1] - 12;\n      furthestY = pos[1] + 12;\n    }\n    for (let i = startingX; i < furthestX; i++) {\n      for (let j = startingY; j < furthestY; j++) {\n        if (this.squares[[i, j]] && this.squares[[i,j]].live) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  placeObject(startingPos, objectName) {\n    const place = this.constantize(objectName);\n    const positionList = place(startingPos);\n    const findDist = this.constantize(`${objectName}Dist`);\n    const distBetween = findDist();\n    if (this.isAllDead(startingPos, distBetween)) {\n      positionList.forEach((position) => {\n        if (position[0] < Util.NUMSQUARESX && position[1] < Util.NUMSQUARESY && position[0] > 0 && position[1] > 0) {\n          this.squares[position].live = true;\n        }\n      });\n\n      return true;\n    }\n  }\n\n  placeObjects(objectName, count) {\n    // TODO: REALLY HACKY CHANGE THIS CODE\n    let objCount = count;\n    if (objectName === \"gosperGliderGun\" && count >= 8) {\n      objCount = 10;\n    }\n    const findDist = this.constantize(`${objectName}Dist`);\n    const distBetween = findDist();\n\n    let offset = 0;\n\n    const shipsCountX = Math.floor(Math.sqrt(objCount));\n    const shipsCountY = Math.floor(Math.sqrt(objCount)) + 1;\n\n    const paddingX = Math.floor(Util.NUMSQUARESX / (shipsCountX + 1));\n    const paddingY = Math.floor(Util.NUMSQUARESY / (shipsCountY + 1));\n\n    let placedCount = 0;\n    for (let i = 0; i < shipsCountX; i++) {\n      for (let j = 0; j < shipsCountY; j++) {\n        if (i !== 0 && paddingX < distBetween) {\n          offset = distBetween - paddingX;\n        }\n        const xPos = 5 + paddingX * (i + 1) - Math.floor(distBetween / 2) + offset;\n        const yPos = paddingY * (j + 1) - Math.floor(distBetween / 2) + Math.floor(distBetween / 2);\n        if ((this.placeObject([xPos, yPos], objectName) &&\n          ++placedCount === objCount)) {\n            return null;\n        }\n      }\n    }\n  }\n\n  objectAttack(objectName) {\n    const findDist = this.constantize(`${objectName}Dist`);\n    const distBetween = findDist();\n    const startingY = 4;\n    const startingX = 4;\n\n    const shipsCountX = Math.floor((Util.NUMSQUARESX - distBetween) / distBetween);\n    const shipsCountY = Math.floor((Util.NUMSQUARESY - distBetween) / distBetween);\n    for (let i = 0; i < shipsCountX; i++) {\n      for (let j = 0; j < shipsCountY; j++) {\n        this.placeObject([i * distBetween + startingX, (j * distBetween) + distBetween ], objectName);\n\n      }\n    }\n  }\n\n\n  addLiveCount() {\n    Game.ALLPOSITIONS.forEach((position) => {\n      this.squares[position].surroundingLivesCount = this.howManyLive(position);\n    });\n  }\n\n  surroundingSquares(pos) {\n    const surrounds = Util.surroundingPositions(pos).map(squarepos => {\n      return this.squares[squarepos];\n    });\n    return surrounds;\n  }\n\n  howManyLive(pos) {\n    const squares = this.surroundingSquares(pos);\n    const liveCount = squares.reduce((accum, square) => {\n      if (square !== undefined && square.live) {\n        return accum + 1;\n      } else {\n        return accum;\n      }\n    }, 0);\n    return liveCount;\n  }\n\n  changeSquares() {\n    Game.ALLPOSITIONS.forEach((position) => {\n      return this.squares[position].change(this.squares[position].surroundingLivesCount);\n    });\n    this.addLiveCount();\n  }\n\n  draw(context) {\n    if (!this.onlySquares) {\n      if (!this.fill) {\n        context.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n        context.fillStyle = Game.BG_COLOR;\n        context.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n      }\n    }\n    Game.ALLPOSITIONS.forEach((position) => {\n      if (this.squares[position].live) {\n      }\n      this.squares[position].draw(context);\n    });\n  }\n\n  block(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n    return [[posX, posY], [posX + 1, posY], [posX, posY + 1], [posX + 1, posY + 1]];\n  }\n  blockDist() {\n    return 4;\n  }\n\n  beehive(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX + 1, posY - 1], [posX + 2, posY - 1], [posX + 3, posY], [posX + 2, posY + 1], [posX + 1, posY + 1]];\n  }\n\n  beehiveDist() {\n    return 6;\n  }\n\n  loaf(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX + 1, posY - 1], [posX + 2, posY - 1], [posX + 3, posY], [posX + 3, posY + 1], [posX + 2, posY + 2], [posX + 1, posY + 1]];\n  }\n\n  loafDist() {\n    return 6;\n  }\n\n  boat(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX, posY - 1], [posX + 1, posY - 1], [posX + 2, posY], [posX + 1, posY + 1]];\n  }\n\n  boatDist() {\n    return 5;\n  }\n\n  tub(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX + 1, posY - 1], [posX + 2, posY], [posX + 1, posY + 1]];\n  }\n\n  tubDist() {\n    return 5;\n  }\n\n  blinker(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX + 1, posY], [posX + 2, posY]];\n  }\n\n  blinkerDist() {\n    return 5;\n  }\n\n  toad(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX + 1, posY - 1], [posX + 2, posY - 1], [posX + 3, posY - 1], [posX + 2, posY], [posX + 1, posY]];\n  }\n\n  toadDist() {\n    return 6;\n  }\n\n  beacon(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX + 1, posY], [posX, posY + 1], [posX + 1, posY + 1], [posX + 2, posY + 2], [posX + 3, posY + 3], [posX + 2, posY + 3], [posX + 3, posY + 2]];\n  }\n\n  beaconDist() {\n    return 6;\n  }\n\n  clock(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX + 2, posY], [posX + 2, posY - 1], [posX + 1, posY + 1], [posX + 3, posY + 1], [posX + 1, posY + 2]];\n  }\n\n  clockDist() {\n    return 6;\n  }\n\n  pulsar(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX + 2, posY - 10], [posX + 3, posY - 10], [posX + 4, posY - 10], [posX + 8, posY - 10], [posX + 9, posY - 10], [posX + 10, posY - 10],\n    [posX, posY - 8], [posX + 5, posY - 8], [posX + 7, posY - 8], [posX + 12, posY - 8],\n    [posX, posY - 7], [posX + 5, posY - 7], [posX + 7, posY - 7], [posX + 12, posY - 7],\n    [posX, posY - 6], [posX + 5, posY - 6], [posX + 7, posY - 6], [posX + 12, posY - 6],\n    [posX + 2, posY - 5], [posX + 3, posY - 5], [posX + 4, posY - 5], [posX + 8, posY - 5], [posX + 9, posY - 5], [posX + 10, posY - 5],\n    [posX + 2, posY - 3], [posX + 3, posY - 3], [posX + 4, posY - 3], [posX + 8, posY - 3], [posX + 9, posY - 3], [posX + 10, posY - 3],\n    [posX, posY - 2], [posX + 5, posY - 2], [posX + 7, posY - 2], [posX + 12, posY - 2],\n    [posX, posY - 1], [posX + 5, posY - 1], [posX + 7, posY - 1], [posX + 12, posY - 1],\n    [posX, posY], [posX + 5, posY], [posX + 7, posY], [posX + 12, posY],\n    [posX + 2, posY + 2], [posX + 3, posY + 2], [posX + 4, posY + 2], [posX + 8, posY + 2], [posX + 9, posY + 2], [posX + 10, posY + 2]];\n  }\n\n  pulsarDist() {\n    return 18;\n  }\n\n  pentadecathlon(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX + 1, posY], [posX + 2, posY - 1], [posX + 2, posY + 1], [posX + 3, posY], [posX + 4, posY],\n    [posX + 5, posY], [posX + 6, posY], [posX + 7, posY - 1], [posX + 7, posY + 1], [posX + 8, posY], [posX + 9, posY]];\n  }\n\n  pentadecathlonDist() {\n    return 20;\n  }\n\n  glider(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX + 1, posY], [posX + 2, posY], [posX + 2, posY - 1], [posX + 1, posY - 2]];\n  }\n\n  gliderDist() {\n    return 6;\n  }\n\n  lightWeightSpaceship(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return [[posX, posY], [posX + 1, posY - 1], [posX + 2, posY - 1], [posX + 3, posY - 1], [posX + 4, posY - 1], [posX + 4, posY], [posX + 4, posY + 1], [posX + 3, posY + 2], [posX, posY + 2]];\n  }\n\n  lightWeightSpaceshipDist() {\n    return 8;\n  }\n\n  benchmark(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return[\n      [posX, posY], [posX + 1, posY], [posX + 2, posY], [posX + 3, posY],\n      [posX + 4, posY], [posX + 5, posY], [posX+ 6, posY], [posX + 7, posY],\n      [posX + 8, posY], [posX + 9, posY], [posX + 10, posY], [posX + 11, posY],\n      [posX + 12, posY],[posX + 13, posY],[posX + 14, posY]];\n  }\n\n  benchmarkDist() {\n    return 16;\n  }\n\n  gosperGliderGun(startingPos) {\n    const posX = startingPos[0];\n    const posY = startingPos[1];\n\n    return[\n      [posX, posY], [posX, posY - 1], [posX + 1, posY], [posX + 1, posY - 1],\n\n      [posX + 10, posY], [posX + 10, posY + 1], [posX + 10, posY - 1],\n      [posX + 11, posY + 2], [posX + 12, posY + 3], [posX + 13, posY + 3], [posX + 15, posY + 2],\n      [posX + 16, posY + 1], [posX + 16, posY], [posX + 16, posY - 1],\n      [posX + 17, posY], [posX + 14, posY], [posX + 11, posY - 2], [posX + 12, posY - 3],\n      [posX + 13, posY - 3], [posX + 15, posY - 2],\n\n      [posX + 20, posY - 1], [posX + 20, posY - 2], [posX + 20, posY - 3],\n      [posX + 21, posY - 3], [posX + 21, posY - 2], [posX + 21, posY - 1], [posX + 22, posY],\n      [posX + 24, posY], [posX + 24, posY + 1], [posX + 22, posY - 4], [posX + 24, posY - 4], [posX + 24, posY - 5],\n\n      [posX + 34, posY - 2], [posX + 34, posY - 3], [posX + 35, posY - 2], [posX + 35, posY - 3]];\n  }\n\n  gosperGliderGunDist() {\n    return 40;\n  }\n\n  bindButtons() {\n    this.squareClick();\n    this.stepOnOffButton();\n    this.stepButton();\n    this.rainbowStepButton();\n    this.randomColorsButton();\n    this.followPathButton();\n    this.objectAttackButtons();\n    this.objectPlaceButtons();\n    this.randomObjectsButton();\n    this.percentLivingButton();\n    this.startButton();\n    this.fillPathButton();\n  }\n\n  squareClick() {\n    const canvas = this.canvas;\n    canvas.addEventListener(\"click\", this.giveSquareLife.bind(this));\n  }\n\n  giveSquareLife(event) {\n    const xPos = Math.floor(event.layerX / Util.rectSize());\n    const yPos = Math.floor(event.layerY / Util.rectSize());\n    this.squares[[xPos, yPos]].live = true;\n  }\n\n\n\n  stepOnOffButton() {\n    const stepOnOff = document.getElementById(\"step-on-off\");\n    stepOnOff.addEventListener(\"click\", this.toggleStep.bind(this));\n  }\n\n  toggleStep() {\n    if (this.step) {\n      this.step = false;\n      return this.step;\n    }\n    this.step = true;\n    return this.step;\n  }\n\n\n  stepButton() {\n    const step = document.getElementById(\"step\");\n    step.addEventListener(\"click\", this.step.bind(this));\n  }\n\n  step() {\n    this.changeSquares();\n    this.draw(this.context);\n  }\n\n\n\n  rainbowStepButton() {\n    const rainbow = document.getElementById(\"rainbow-step\");\n    rainbow.addEventListener(\"click\", this.toggleRainbowStep.bind(this));\n  }\n\n  toggleRainbowStep() {\n    this.randomColors = false;\n    if (this.rainbowStep) {\n      this.rainbowStep = false;\n      return this.rainbowStep;\n    }\n    this.rainbowStep = true;\n    return this.rainbowStep;\n  }\n\n  randomColorsButton() {\n    const randomColors = document.getElementById(\"random-colors\");\n    randomColors.addEventListener(\"click\", this.toggleRandomColors.bind(this));\n  }\n\n  toggleRandomColors() {\n    this.rainbowStep = false;\n    if (this.randomColors) {\n      this.randomColors = false;\n      return this.randomColors;\n    }\n    this.randomColors = true;\n    return this.randomColors;\n  }\n\n  followPathButton() {\n    const followPath = document.getElementById(\"follow-path\");\n    followPath.addEventListener(\"click\", this.toggleFollowPath.bind(this));\n  }\n\n  toggleFollowPath() {\n    if (this.followPath) {\n      this.followPath = false;\n      return this.followPath;\n    }\n    this.followPath = true;\n    return this.followPath;\n  }\n\n  fillPathButton() {\n    const fillPath = document.getElementById(\"fill-path\");\n    fillPath.addEventListener(\"click\", this.togglefillPath.bind(this));\n  }\n\n  togglefillPath() {\n    this.followPath = false;\n    if (this.fill) {\n      this.fill = false;\n      return this.fill;\n    }\n    this.fill = true;\n    return this.fill;\n  }\n\n  startButton() {\n    const startButton = document.getElementById('start');\n    startButton.addEventListener(\"click\", this.startClick.bind(this));\n  }\n\n  startClick(e) {\n    this.percentLiving = 10;\n    this.random = true;\n    this.squares = {};\n    this.addSquares();\n    this.addLiveCount();\n  }\n\n  percentLivingButton() {\n    const percentLivingButton = document.getElementById('percent-living');\n    percentLivingButton.addEventListener(\"click\", this.percentLivingClick.bind(this));\n  }\n\n  percentLivingClick(e) {\n    const percent = document.getElementById(\"percent-living-input\").value;\n    this.percentLiving = parseInt(percent);\n    this.squares = {};\n    this.addSquares();\n    this.addLiveCount();\n  }\n\n  objectAttackButtons() {\n    const objectButtons = document.getElementsByClassName('object-attack');\n    for (let i = 0; i < objectButtons.length; i++) {\n      objectButtons[i].addEventListener(\"click\", this.objectAttackClick.bind(this));\n    }\n  }\n\n  objectAttackClick(e) {\n    Game.RANDOMOBJECTS = false;\n    Game.PLACEOBJECTS = false;\n    Game.OBJECTATTACK = true;\n    this.random = false;\n    this.squares = {};\n    this.addSquares();\n    const objectName = document.getElementById(\"object-attack-input\").value;\n    this.objectAttack(objectName);\n    this.addLiveCount();\n  }\n\n  objectPlaceButtons() {\n    const objectButtons = document.getElementsByClassName('object-place');\n    for (let i = 0; i < objectButtons.length; i++) {\n      objectButtons[i].addEventListener(\"click\", this.objectPlaceClick.bind(this));\n    }\n  }\n\n  objectPlaceClick(e) {\n    Game.RANDOMOBJECTS = false;\n    Game.PLACEOBJECTS = true;\n    Game.OBJECTATTACK = false;\n    this.random = false;\n\n    this.squares = {};\n    this.addSquares();\n    const count = document.getElementById(\"object-place-count-input\").value;\n    const objectName = document.getElementById(\"object-place-input\").value;\n    this.placeObjects(objectName, parseInt(count));\n    this.addLiveCount();\n  }\n  // if (Game.RANDOMOBJECTS) {\n  //   this.placeRandomObjectsRandomly(Game.RANDOMOBJECTSCOUNT);\n  // }\n\n  randomObjectsButton() {\n    const randomObjectsButton = document.getElementById('random-objects');\n    randomObjectsButton.addEventListener(\"click\", this.randomObjectsClick.bind(this));\n  }\n\n  randomObjectsClick(e) {\n    Game.RANDOMOBJECTS = true;\n    Game.PLACEOBJECTS = false;\n    Game.OBJECTATTACK = false;\n    this.random = false;\n\n    this.squares = {};\n    this.addSquares();\n\n    const count = parseInt(document.getElementById(\"random-object-count-input\").value);\n    this.placeRandomObjectsRandomly(count);\n    this.addLiveCount();\n  }\n\n\n\n}\n\nGame.OBJECTNAMES =\n  [\"block\", \"beehive\", \"loaf\", \"boat\", \"tub\", \"blinker\", \"toad\", \"beacon\",\n  \"pulsar\", \"pentadecathlon\", \"glider\", \"lightWeightSpaceship\", \"clock\", \"benchmark\", \"gosperGliderGun\"];\n\nGame.OBJECTS = {\n  block: {dist: 0, positionList: [[0, 0], [1, 0], [0, 1], [1, 1]]},\n  beehive: {dist: 0, positionList: [[0, 0], [1, 1], [2, 1], [3, 0], [2, 1], [1, 1]]},\n  loaf: {dist: 0, positionList: [[0, 0], [1, 1], [2, 1], [3, 0], [3, 1], [2, 2], [1, 1]]},\n  boat: {dist: 0, positionList: [[0, 0], [0, 1], [1, 1], [2, 0], [1, 1]]},\n  tub: {dist: 0, positionList: [[0, 0], [1, 1], [2, 0], [1, 1]]},\n  blinker: {dist: 0, positionList: [[0, 0], [1, 0], [2, 0]]},\n  toad: {dist: 0, positionList: [[0, 0], [1, 1], [2, 1], [3, 1], [2, 0], [1, 0]]},\n  beacon: {dist: 0, positionList: [[0, 0], [1, 0], [0, 1], [1, 1], [2, 2], [3, 3], [2, 3], [3, 2]]},\n  pulsar: {dist: 0, positionList: [[2, 10], [3, 10], [4, 10], [8, 10], [9, 10], [10, 10],\n  [0, 8], [5, 8], [7, 8], [12, 8],\n  [0, 7], [5, 7], [7, 7], [12, 7],\n  [0, 6], [5, 6], [7, 6], [12, 6],\n  [2, 5], [3, 5], [4, 5], [8, 5], [9, 5], [10, 5],\n  [2, 3], [3, 3], [4, 3], [8, 3], [9, 3], [10, 3],\n  [0, 2], [5, 2], [7, 2], [12, 2],\n  [0, 1], [5, 1], [7, 1], [12, 1],\n  [0, 0], [5, 0], [7, 0], [12, 0],\n  [2, 2], [3, 2], [4, 2], [8, 2], [9, 2], [10, 2]]},\n  pentadecathlon: {dist: 0, positionList: [[0, 0], [1, 0], [2, 1], [2, 1], [3, 0], [4, 0],\n  [5, 0], [6, 0], [7, 1], [7, 1], [8, 0], [9, 0]]},\n  glider: {dist: 0, positionList: [[0, 0], [1, 0], [2, 0], [2, 1], [1, 2]]},\n  lightWeightSpaceship: {dist: 0, positionList: [[0, 0], [1, 1], [2, 1], [3, 1], [4, 1], [4, 0], [4, 1], [3, 2], [0, 2]]},\n  clock: {dist: 0, positionList: [[0, 0], [2, 0], [2, 1], [1, 1], [3, 1], [1, 2]]},\n  benchmark: {dist: 0, positionList: [\n    [0, 0], [1, 0], [2, 0], [3, 0],\n    [4, 0], [5, 0], [0+ 6, 0], [7, 0],\n    [8, 0], [9, 0], [1055555555, 0], [11, 0],\n    [12, 0],[13, 0],[14, 0]]},\n};\n\nGame.DIM_X = Util.CANVASWIDTH;\nGame.DIM_Y = Util.CANVASHEIGHT;\nGame.BG_COLOR = \"#424949\";\nGame.ALLPOSITIONS = Util.allPositions();\n\nGame.OBJECTATTACK = false;\nGame.RANDOMOBJECTS = false;\nGame.PLACEOBJECTS = false;\nGame.RANDOMOBJECTSCOUNT = 10;\n\n\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","const Util = require(\"./util\");\n\n\nclass Square {\n  constructor(options) {\n    this.game = options.game;\n    this.pos = options.pos;\n    this.canvasPosition = options.canvasPosition;\n    this.width = options.width;\n    this.height = options.height;\n    this.color = this.assignColor();\n    this.assignLive();\n\n    this.pathColor = \"#424949\";\n    this.surroundingLivesCount = null;\n  }\n\n  random() {\n    if (Math.floor(Math.random() * 100) < this.game.percentLiving) {\n      this.live = true;\n    } else {\n      this.live = false;\n    }\n  }\n\n\n  assignLive() {\n    if (this.game.random) {\n      this.random();\n    }\n  }\n  killCell() {\n    this.live = false;\n  }\n\n  raiseCell() {\n    this.color = this.assignColor();\n    this.live = true;\n  }\n\n  change(surroundLiveCount) {\n    if (this.live === true) {\n      if (surroundLiveCount < 2 || surroundLiveCount > 3) {\n        this.killCell();\n        this.pathColor = \"#000000\";\n      }\n    } else {\n      if (surroundLiveCount === 3) {\n        this.raiseCell();\n      }\n    }\n  }\n\n\n\n  draw(context) {\n    if (this.live) {\n      context.fillStyle = this.color;\n      context.fillRect(this.canvasPosition[0], this.canvasPosition[1], this.width, this.height);\n    } else {\n      if (this.game.onlySquares) {\n        if (!this.game.fill) {\n          context.clearRect(this.canvasPosition[0], this.canvasPosition[1], this.width, this.height);\n        }\n        if (this.game.followPath) {\n          context.clearRect(this.canvasPosition[0], this.canvasPosition[1], this.width, this.height);\n          context.fillStyle = this.pathColor;\n          context.fillRect(this.canvasPosition[0], this.canvasPosition[1], this.width, this.height);\n        }\n      }\n    }\n  }\n\n  assignColor() {\n    if (this.game.randomColors) {\n      return this.randomColor();\n    } else if (this.game.rainbowStep){\n      return this.stepColor();\n    } else {\n      return this.game.color;\n    }\n  }\n\n  stepColor() {\n    return Square.COLORS[(Square.COLORS.indexOf(this.color) + 1) % Square.COLORS.length];\n  }\n\n  randomColor() {\n    return Square.COLORS[Math.floor(Math.random() * Square.COLORS.length)];\n  }\n\n}\nSquare.COLORS = [\n  \"red\",\n  \"orange\",\n  \"yellow\",\n  \"green\",\n  \"blue\",\n  \"indigo\",\n  \"violet\"\n];\n\n\n\nmodule.exports = Square;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/square.js\n// module id = 2\n// module chunks = 0","const Util = {\n  canvasPosition(position) {\n    return [Util.RECTWIDTH * position[0], Util.RECTHEIGHT * position[1]];\n  },\n  surroundingPositions(pos) {\n    return [\n      [1 + pos[0], 1 + pos[1]],\n      [pos[0], 1 + pos[1]],\n      [-1 + pos[0], 1 + pos[1]],\n      [1 + pos[0], pos[1]],\n      [1 + pos[0], -1 + pos[1]],\n      [pos[0], -1 + pos[1]],\n      [-1 + pos[0], pos[1]],\n      [-1 + pos[0], -1 + pos[1]],\n    ];\n  },\n  allPositions() {\n    const positions = [];\n    for (let i = 0; i < Util.NUMSQUARESX; i++) {\n      for (let j = 0; j < Util.NUMSQUARESY; j++) {\n        positions.push([i, j]);\n      }\n    }\n    return positions;\n  },\n  numSquaresX() {\n    return Util.NUMSQUARESX;\n  },\n  numSquaresY() {\n    return Util.NUMSQUARESY;\n  },\n  rectSize() {\n    return Util.RECTHEIGHT;\n  }\n};\n\nUtil.CANVASWIDTHMULTIPLIER = 1;\nUtil.CANVASHEIGHTMULTIPLIER = 1;\nUtil.CANVASWIDTH = 1000 * Util.CANVASWIDTHMULTIPLIER;\nUtil.CANVASHEIGHT = 600 * Util.CANVASHEIGHTMULTIPLIER;\nUtil.SQUAREMULTIPLIER = 1;\nUtil.NUMSQUARESX = 120 * Util.SQUAREMULTIPLIER;\nUtil.NUMSQUARESY = 80 * Util.SQUAREMULTIPLIER;\nUtil.RECTWIDTH = Util.CANVASHEIGHT / Util.NUMSQUARESY;\nUtil.RECTHEIGHT = Util.CANVASHEIGHT / Util.NUMSQUARESY;\n\nmodule.exports = Util;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util.js\n// module id = 3\n// module chunks = 0","class GameView {\n  constructor(game, context) {\n    this.game = game;\n    this.context = context;\n  }\n\n  start() {\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate() {\n    if (!this.game.step) {\n      this.game.changeSquares();\n      this.game.draw(this.context);\n    }\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nmodule.exports = GameView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game_view.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}